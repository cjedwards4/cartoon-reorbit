generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CZone {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  layoutData  Json
  background  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ctoon {
  id              String          @id @default(uuid())
  name            String
  series          String?
  type            String
  rarity          String
  assetPath       String
  releaseDate     DateTime?
  perUserLimit    Int?
  codeOnly        Boolean         @default(false)
  inCmart         Boolean         @default(false)
  price           Int             @default(0)
  initialQuantity Int?             // NULL means unlimited
  quantity        Int?             // NULL means unlimited
  createdAt       DateTime        @default(now())
  set             String?
  characters      String[]
  isGtoon         Boolean         @default(false)

  owners          UserCtoon[]
  rewardCtoons    RewardCtoon[]
  packOptions     PackCtoonOption[]
  gameConfigsAsGrandPrize  GameConfig[] @relation("GrandPrize", fields: [], references: [])
  wishlistItems   WishlistItem[]
}

model UserCtoon {
  id             String    @id @default(uuid())
  userId         String
  ctoonId        String
  isTradeable    Boolean   @default(true)
  inCzone        Boolean   @default(false)
  isFirstEdition Boolean   @default(false)
  mintNumber     Int?
  userPurchased  Boolean   @default(true)
  createdAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  ctoon  Ctoon  @relation(fields: [ctoonId], references: [id])

  tradeCtoons   TradeCtoon[]
  tradeOfferCtoons TradeOfferCtoon[]
  auctions          Auction[]
}

model UserPoints {
  userId         String    @id
  points         Int       @default(0)
  lastDailyAward DateTime?
  updatedAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id               String           @id @default(uuid())
  username         String?          @unique
  discordId        String           @unique
  discordTag       String?
  discordAvatar    String?
  email            String?          @unique
  avatar           String?
  accessToken      String?
  refreshToken     String?
  tokenExpiresAt   DateTime?
  roles            String[]         @default([])
  isAdmin          Boolean          @default(false)
  inGuild          Boolean          @default(true)
  createdAt        DateTime         @default(now())
  lastLogin        DateTime?
  discordCreatedAt DateTime?

  cZones           CZone[]
  logins           LoginLog[]
  gamePointLogs    GamePointLog[]
  claims           Claim[]
  visits           Visit[]
  points           UserPoints?
  ctoons           UserCtoon[]
  friends          Friend[]         @relation("UserFriends")
  friendedBy       Friend[]         @relation("UserFriendOf")
  traderARooms     TradeRoom[]      @relation("TraderA")
  traderBRooms     TradeRoom[]      @relation("TraderB")
  trades           Trade[]
  tradeSpectators  TradeSpectator[]
  ips              UserIP[]
  packs            UserPack[]
  wishlistItems   WishlistItem[]
  tradeOffersInitiated TradeOffer[] @relation("OfferInitiator")
  tradeOffersReceived  TradeOffer[] @relation("OfferRecipient")
  auctionsAsHighestBid  Auction[]   @relation("HighestBidder")
  auctionsAsWinner      Auction[]   @relation("AuctionWinner")
  bids                  Bid[]
  auctionsCreated  Auction[]   @relation("AuctionsCreated")
}

model UserIP {
  id     String @id @default(uuid())
  userId String
  ip     String

  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, ip])
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("UserFriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model ClaimCode {
  id         String             @id @default(uuid())
  code       String             @unique
  showInFrontend    Boolean            @default(true)
  maxClaims  Int
  createdAt  DateTime           @default(now())
  expiresAt  DateTime?
  claims     Claim[]
  rewards    ClaimCodeReward[]
}

model Claim {
  id        String    @id @default(uuid())
  userId    String
  codeId    String
  claimedAt DateTime  @default(now())

  user  User      @relation(fields: [userId], references: [id])
  code  ClaimCode @relation(fields: [codeId], references: [id])

  @@unique([userId, codeId])
}

model ClaimCodeReward {
  id       String            @id @default(uuid())
  codeId   String
  points   Int?

  code     ClaimCode         @relation(fields: [codeId], references: [id])
  ctoons   RewardCtoon[]
  packs    RewardPack[]
}

model RewardCtoon {
  id        String             @id @default(uuid())
  rewardId  String
  ctoonId   String
  quantity  Int                @default(1)

  reward    ClaimCodeReward    @relation(fields: [rewardId], references: [id])
  ctoon     Ctoon              @relation(fields: [ctoonId], references: [id])
}

model RewardPack {
  id        String   @id @default(uuid())
  rewardId  String
  packId    String
  quantity  Int      @default(1)

  reward    ClaimCodeReward @relation(fields: [rewardId], references: [id])
  pack      Pack            @relation(fields: [packId], references: [id])

  @@unique([rewardId, packId])
}

model Visit {
  id          String   @id @default(uuid())
  userId      String
  zoneOwnerId String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model TradeRoom {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  active      Boolean  @default(true)

  traderAId   String?
  traderBId   String?
  traderA     User?    @relation("TraderA", fields: [traderAId], references: [id])
  traderB     User?    @relation("TraderB", fields: [traderBId], references: [id])

  trades      Trade[]
  spectators  TradeSpectator[]
}

model Trade {
  id          String   @id @default(uuid())
  userId      String
  roomId      String
  confirmed   Boolean  @default(false)

  user   User      @relation(fields: [userId], references: [id])
  room   TradeRoom @relation(fields: [roomId], references: [id])
  ctoons TradeCtoon[]
}

model TradeCtoon {
  id          String   @id @default(uuid())
  tradeId     String
  userCtoonId String

  trade     Trade     @relation(fields: [tradeId], references: [id])
  userCtoon UserCtoon @relation(fields: [userCtoonId], references: [id])
}

model TradeSpectator {
  id     String   @id @default(uuid())
  roomId String
  userId String

  room   TradeRoom   @relation(fields: [roomId], references: [id])
  user   User        @relation(fields: [userId], references: [id])
}

model Pack {
  id            String   @id @default(uuid())
  name          String
  description   String?
  price         Int      @default(0)
  imagePath     String?
  inCmart       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rarityConfigs PackRarityConfig[]
  ctoonOptions  PackCtoonOption[]
  userPacks     UserPack[]
  rewardPacks   RewardPack[]
}

model PackRarityConfig {
  id                  String @id @default(uuid())
  packId              String
  rarity              String
  count               Int
  probabilityPercent  Int    @default(100)

  pack      Pack   @relation(fields: [packId], references: [id])

  @@unique([packId, rarity])
}

model PackCtoonOption {
  id        String @id @default(uuid())
  packId    String
  ctoonId   String
  weight    Int    @default(1)

  pack   Pack   @relation(fields: [packId], references: [id])
  ctoon  Ctoon  @relation(fields: [ctoonId], references: [id])

  @@unique([packId, ctoonId])
}

model UserPack {
  id        String   @id @default(uuid())
  userId    String
  packId    String
  opened    Boolean  @default(false)
  openedAt  DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  pack Pack @relation(fields: [packId], references: [id])
}

model LoginLog {
  id        String   @id @default(uuid())
  userId    String
  ip        String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([ip])
}

model GamePointLog {
  id         String   @id @default(uuid())
  userId     String
  points     Int
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}

model GameConfig {
  id                   String   @id @default(uuid())
  gameName             String   @unique
  leftCupPoints        Int      @default(0)
  rightCupPoints       Int      @default(0)
  goldCupPoints        Int      @default(0)
  dailyPointLimit      Int      @default(100)
  grandPrizeCtoonId    String? 
  grandPrizeCtoon      Ctoon?   @relation("GrandPrize", fields: [grandPrizeCtoonId], references: [id])

  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  ctoonId   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  ctoon  Ctoon  @relation(fields: [ctoonId], references: [id])

  @@unique([userId, ctoonId])
}

/// A pending trade between two users
model TradeOffer {
  id             String               @id @default(uuid())
  initiatorId    String               // who is making the offer
  recipientId    String               // who will receive the offer
  pointsOffered  Int                  @default(0)
  status         String               @default("PENDING")   // e.g. PENDING, ACCEPTED, REJECTED
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  initiator      User                 @relation("OfferInitiator", fields: [initiatorId], references: [id])
  recipient      User                 @relation("OfferRecipient", fields: [recipientId], references: [id])

  ctoons          TradeOfferCtoon[]
}

/// Join table tying a specific UserCtoon to a TradeOffer,
/// tagged as either OFFERED or REQUESTED
model TradeOfferCtoon {
  id             String                   @id @default(uuid())
  tradeOfferId   String
  userCtoonId    String
  role           TradeOfferCtoonRole

  tradeOffer     TradeOffer               @relation(fields: [tradeOfferId], references: [id])
  userCtoon      UserCtoon                @relation(fields: [userCtoonId],  references: [id])

  @@unique([tradeOfferId, userCtoonId, role])
}

/// Are we offering this cToon, or requesting it?
enum TradeOfferCtoonRole {
  OFFERED
  REQUESTED
}

enum AuctionStatus {
  ACTIVE
  CLOSED
  CANCELLED
}

model Auction {
  id               String         @id @default(uuid())
  userCtoonId      String
  initialBet       Int
  duration         Int            // days
  endAt            DateTime
  status           AuctionStatus  @default(ACTIVE)
  createdAt        DateTime       @default(now())
  creatorId        String?
  highestBid       Int            @default(0)
  highestBidderId  String?        
  winnerId         String?        
  winnerAt         DateTime?
  endingSoonNotified Boolean @default(false)

  userCtoon        UserCtoon      @relation(fields: [userCtoonId],    references: [id])
  creator          User?           @relation("AuctionsCreated", fields: [creatorId],    references: [id])
  highestBidder    User?          @relation("HighestBidder",   fields: [highestBidderId], references: [id])
  winner           User?          @relation("AuctionWinner",    fields: [winnerId],        references: [id])

  bids             Bid[]          // one-to-many on Bid
  @@index([userCtoonId, status])
}

model Bid {
  id        String    @id @default(uuid())
  auctionId String
  userId    String
  amount    Int
  createdAt DateTime  @default(now())

  auction   Auction   @relation(fields: [auctionId], references: [id])
  user      User      @relation(fields: [userId],    references: [id])
}